
Execute (Test Parsing):
  let test_message = 'lsp server running'
  let parsed = langserver#util#parse_message(test_message)
  AssertEqual parsed, {'type': 'info', 'data': 'lsp server running'}

  let test_message = 'langserver-go: reading on stdin, writing on stdout'
  let parsed = langserver#util#parse_message(test_message)
  AssertEqual parsed, {'type': 'info', 'data': 'langserver-go: reading on stdin, writing on stdout'}

  let test_message = '--> request #1: initialize: {"capabilities":{},"rootPath":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver"}'
  let parsed = langserver#util#parse_message(test_message)
  let expected = {'type': 'request', 'data': {'initialize': {"capabilities":{}, "rootPath": "file:///home/tj/go/src/github.com/sourcegraph/go-langserver"}}}
  AssertEqual parsed['type'], expected['type']
  AssertEqual parsed['data'], expected['data']

  let test_message = '<-- result #1: initialize: {"capabilities":{"textDocumentSync":1,"hoverProvider":true,"definitionProvider":true,"referencesProvider":true,"workspaceSymbolProvider":true}}'
  let parsed = langserver#util#parse_message(test_message)
  AssertEqual parsed, {'type': 'result', 'data': {"initialize": {"capabilities":{"textDocumentSync":1,"hoverProvider": v:true,"definitionProvider": v:true,"referencesProvider": v:true,"workspaceSymbolProvider": v:true}}}}

  let test_message = '<-- result #2: textDocument/definition: {"textDocument":{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go"},"position":{"character":10,"line":17}}'
  let parsed = langserver#util#parse_message(test_message)
  AssertEqual parsed, {'type': 'result', 'data': {'textDocument/definition': {"textDocument": {"uri": "file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go"}, "position": {"character":10, "line":17}}}}

Execute (Test message results greater than 10):
  let test_message = '--> request #11: textDocument/hover: {"textDocument":{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/handler.go"},"position":{"character":9,"line":44}}'
  let parsed = langserver#util#parse_message(test_message)
  AssertEqual parsed, {'type': 'request', 'data': {'textDocument/hover': {"textDocument":{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/handler.go"},"position":{"character":9,"line":44}}}}

  let test_message = '<-- result #11: textDocument/hover: {"contents":[{"language":"go","value":"type LangHandler struct"},{"language":"markdown","value":"LangHandler is a Go language server LSP/JSON-RPC handler. \n\n"}],"range":{"start":{"line":44,"character":9},"end":{"line":44,"character":20}}}'
  let parsed = langserver#util#parse_message(test_message)

Execute (Test parse of references):
  let test_message = '<-- result #25: textDocument/references: [{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go","range":{"start":{"line":7,"character":22},"end":{"line":7,"character":28}}},{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go","range":{"start":{"line":9,"character":4},"end":{"line":9,"character":10}}},{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go","range":{"start":{"line":9,"character":39},"end":{"line":9,"character":45}}},{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go","range":{"start":{"line":10,"character":16},"end":{"line":10,"character":22}}},{"uri":"file:///home/tj/go/src/github.com/sourcegraph/go-langserver/langserver/util.go","range":{"start":{"line":12,"character":13},"end":{"line":12,"character":19}}}]'

  let parsed = langserver#util#parse_message(test_message)
  " let transformed = langserver#references#transform_reply(parsed)
  " Log transformed

Execute (Test parse of symbols):
  let test_message = {'response': {'id': 6, 'result': [{'location': {'uri': 'file:///usr/local/go/src/os/path_plan9.go', 'range': {'end': {'character': 4, 'line': 7}, 'start': {'character': 0, 'line': 6}}}, 'name': 'PathSeparator', 'kind': 14, 'containerName': 'os'}, {'location': {'uri': 'file:///usr/local/go/src/os/path_unix.go', 'range': {'end': {'character': 4, 'line': 9}, 'start': {'character': 0, 'line': 8}}}, 'name': 'PathSeparator', 'kind': 14, 'containerName': 'os'}, {'location': {'uri': 'file:///usr/local/go/src/os/path_windows.go', 'range': {'end': {'character': 4, 'line': 7}, 'start': {'character': 0, 'line': 6}}}, 'name': 'PathSeparator', 'kind': 14, 'containerName': 'os'}], 'jsonrpc': '2.0'}, 'request': {'id': 6, 'jsonrpc': '2.0', 'method': 'workspace/symbol', 'params': {'query': 'PathSeparator'}}}

  let transformed = langserver#symbol#util#transform_reply(test_message['response']['result'])
  Log transformed
